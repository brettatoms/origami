(ns opencv4.video
  (:require [clojure.set])
  (:import  [org.opencv.videoio Videoio]))

(declare new-videocapture)
(declare debug-device)

(defn- key-to-prop-s [k]
    (let [ks (name k) prop (str "CAP_PROP_" (clojure.string/upper-case (clojure.string/replace ks  "-" "_")))]
    (str "org.opencv.videoio.Videoio/" prop)))

(defn- key-to-prop [k]
  (eval (read-string (key-to-prop-s k))))

(defn capture-device [ video ]
  (let [capture (new-videocapture)
        is-setting-file? (and (string? video) (clojure.string/ends-with? video ".edn"))
        video-map (cond
                    (map? video) video
                    is-setting-file? (read-string (slurp video))
                    :else {})
        device (if  (= video-map {}) video (-> video-map :device))
        debug? (dissoc video-map :debug)
        settings
         (keys
          (clojure.set/rename-keys (dissoc video-map :fn :debug :device) {:width :frame-width :height :frame-height } ) )  ]
        (doseq [s settings]
            (.set capture (key-to-prop s) (-> video-map s)))
      (.open capture device)
      (if debug? (debug-device capture))
  capture))

(defn debug-device [capture]
(let[ cam-keys 
    (->> (ns-map 'opencv4.video)
    (keys)
    (map str)
    (filter #(clojure.string/includes? % "CAP_PROP_") )
    (map #(second (clojure.string/split % #"CAP_PROP_")))
    (map #(clojure.string/lower-case %))
    (map #(clojure.string/replace %  "_" "-"))
    (map keyword))] 
    (doseq [k cam-keys]
    (let [v (.get capture (key-to-prop k))]
      (if (and (not (= 0.0 v)) (not (= -1.0 v)))
      (println k  ":" v))))))